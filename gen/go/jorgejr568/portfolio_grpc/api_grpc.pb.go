// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             (unknown)
// source: jorgejr568/portfolio_grpc/api.proto

package portfolio_grpc

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	PortfolioService_GetAllSkills_FullMethodName      = "/jorgejr568.portfolio_grpc.PortfolioService/GetAllSkills"
	PortfolioService_GetSkill_FullMethodName          = "/jorgejr568.portfolio_grpc.PortfolioService/GetSkill"
	PortfolioService_GetAllExperiences_FullMethodName = "/jorgejr568.portfolio_grpc.PortfolioService/GetAllExperiences"
	PortfolioService_GetExperience_FullMethodName     = "/jorgejr568.portfolio_grpc.PortfolioService/GetExperience"
	PortfolioService_GetAllEducations_FullMethodName  = "/jorgejr568.portfolio_grpc.PortfolioService/GetAllEducations"
	PortfolioService_GetEducation_FullMethodName      = "/jorgejr568.portfolio_grpc.PortfolioService/GetEducation"
)

// PortfolioServiceClient is the client API for PortfolioService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type PortfolioServiceClient interface {
	// Skills
	GetAllSkills(ctx context.Context, in *GetAllSkillsRequest, opts ...grpc.CallOption) (*GetAllSkillsResponse, error)
	GetSkill(ctx context.Context, in *GetSkillRequest, opts ...grpc.CallOption) (*GetSkillResponse, error)
	// Experiences
	GetAllExperiences(ctx context.Context, in *GetAllExperiencesRequest, opts ...grpc.CallOption) (*GetAllExperiencesResponse, error)
	GetExperience(ctx context.Context, in *GetExperienceRequest, opts ...grpc.CallOption) (*GetExperienceResponse, error)
	// Educations
	GetAllEducations(ctx context.Context, in *GetAllEducationsRequest, opts ...grpc.CallOption) (*GetAllEducationsResponse, error)
	GetEducation(ctx context.Context, in *GetEducationRequest, opts ...grpc.CallOption) (*GetEducationResponse, error)
}

type portfolioServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewPortfolioServiceClient(cc grpc.ClientConnInterface) PortfolioServiceClient {
	return &portfolioServiceClient{cc}
}

func (c *portfolioServiceClient) GetAllSkills(ctx context.Context, in *GetAllSkillsRequest, opts ...grpc.CallOption) (*GetAllSkillsResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetAllSkillsResponse)
	err := c.cc.Invoke(ctx, PortfolioService_GetAllSkills_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *portfolioServiceClient) GetSkill(ctx context.Context, in *GetSkillRequest, opts ...grpc.CallOption) (*GetSkillResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetSkillResponse)
	err := c.cc.Invoke(ctx, PortfolioService_GetSkill_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *portfolioServiceClient) GetAllExperiences(ctx context.Context, in *GetAllExperiencesRequest, opts ...grpc.CallOption) (*GetAllExperiencesResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetAllExperiencesResponse)
	err := c.cc.Invoke(ctx, PortfolioService_GetAllExperiences_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *portfolioServiceClient) GetExperience(ctx context.Context, in *GetExperienceRequest, opts ...grpc.CallOption) (*GetExperienceResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetExperienceResponse)
	err := c.cc.Invoke(ctx, PortfolioService_GetExperience_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *portfolioServiceClient) GetAllEducations(ctx context.Context, in *GetAllEducationsRequest, opts ...grpc.CallOption) (*GetAllEducationsResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetAllEducationsResponse)
	err := c.cc.Invoke(ctx, PortfolioService_GetAllEducations_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *portfolioServiceClient) GetEducation(ctx context.Context, in *GetEducationRequest, opts ...grpc.CallOption) (*GetEducationResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetEducationResponse)
	err := c.cc.Invoke(ctx, PortfolioService_GetEducation_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// PortfolioServiceServer is the server API for PortfolioService service.
// All implementations must embed UnimplementedPortfolioServiceServer
// for forward compatibility.
type PortfolioServiceServer interface {
	// Skills
	GetAllSkills(context.Context, *GetAllSkillsRequest) (*GetAllSkillsResponse, error)
	GetSkill(context.Context, *GetSkillRequest) (*GetSkillResponse, error)
	// Experiences
	GetAllExperiences(context.Context, *GetAllExperiencesRequest) (*GetAllExperiencesResponse, error)
	GetExperience(context.Context, *GetExperienceRequest) (*GetExperienceResponse, error)
	// Educations
	GetAllEducations(context.Context, *GetAllEducationsRequest) (*GetAllEducationsResponse, error)
	GetEducation(context.Context, *GetEducationRequest) (*GetEducationResponse, error)
	mustEmbedUnimplementedPortfolioServiceServer()
}

// UnimplementedPortfolioServiceServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedPortfolioServiceServer struct{}

func (UnimplementedPortfolioServiceServer) GetAllSkills(context.Context, *GetAllSkillsRequest) (*GetAllSkillsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetAllSkills not implemented")
}
func (UnimplementedPortfolioServiceServer) GetSkill(context.Context, *GetSkillRequest) (*GetSkillResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetSkill not implemented")
}
func (UnimplementedPortfolioServiceServer) GetAllExperiences(context.Context, *GetAllExperiencesRequest) (*GetAllExperiencesResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetAllExperiences not implemented")
}
func (UnimplementedPortfolioServiceServer) GetExperience(context.Context, *GetExperienceRequest) (*GetExperienceResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetExperience not implemented")
}
func (UnimplementedPortfolioServiceServer) GetAllEducations(context.Context, *GetAllEducationsRequest) (*GetAllEducationsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetAllEducations not implemented")
}
func (UnimplementedPortfolioServiceServer) GetEducation(context.Context, *GetEducationRequest) (*GetEducationResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetEducation not implemented")
}
func (UnimplementedPortfolioServiceServer) mustEmbedUnimplementedPortfolioServiceServer() {}
func (UnimplementedPortfolioServiceServer) testEmbeddedByValue()                          {}

// UnsafePortfolioServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to PortfolioServiceServer will
// result in compilation errors.
type UnsafePortfolioServiceServer interface {
	mustEmbedUnimplementedPortfolioServiceServer()
}

func RegisterPortfolioServiceServer(s grpc.ServiceRegistrar, srv PortfolioServiceServer) {
	// If the following call pancis, it indicates UnimplementedPortfolioServiceServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&PortfolioService_ServiceDesc, srv)
}

func _PortfolioService_GetAllSkills_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetAllSkillsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PortfolioServiceServer).GetAllSkills(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: PortfolioService_GetAllSkills_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PortfolioServiceServer).GetAllSkills(ctx, req.(*GetAllSkillsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _PortfolioService_GetSkill_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetSkillRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PortfolioServiceServer).GetSkill(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: PortfolioService_GetSkill_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PortfolioServiceServer).GetSkill(ctx, req.(*GetSkillRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _PortfolioService_GetAllExperiences_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetAllExperiencesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PortfolioServiceServer).GetAllExperiences(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: PortfolioService_GetAllExperiences_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PortfolioServiceServer).GetAllExperiences(ctx, req.(*GetAllExperiencesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _PortfolioService_GetExperience_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetExperienceRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PortfolioServiceServer).GetExperience(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: PortfolioService_GetExperience_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PortfolioServiceServer).GetExperience(ctx, req.(*GetExperienceRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _PortfolioService_GetAllEducations_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetAllEducationsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PortfolioServiceServer).GetAllEducations(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: PortfolioService_GetAllEducations_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PortfolioServiceServer).GetAllEducations(ctx, req.(*GetAllEducationsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _PortfolioService_GetEducation_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetEducationRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PortfolioServiceServer).GetEducation(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: PortfolioService_GetEducation_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PortfolioServiceServer).GetEducation(ctx, req.(*GetEducationRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// PortfolioService_ServiceDesc is the grpc.ServiceDesc for PortfolioService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var PortfolioService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "jorgejr568.portfolio_grpc.PortfolioService",
	HandlerType: (*PortfolioServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetAllSkills",
			Handler:    _PortfolioService_GetAllSkills_Handler,
		},
		{
			MethodName: "GetSkill",
			Handler:    _PortfolioService_GetSkill_Handler,
		},
		{
			MethodName: "GetAllExperiences",
			Handler:    _PortfolioService_GetAllExperiences_Handler,
		},
		{
			MethodName: "GetExperience",
			Handler:    _PortfolioService_GetExperience_Handler,
		},
		{
			MethodName: "GetAllEducations",
			Handler:    _PortfolioService_GetAllEducations_Handler,
		},
		{
			MethodName: "GetEducation",
			Handler:    _PortfolioService_GetEducation_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "jorgejr568/portfolio_grpc/api.proto",
}
